import logging
import time
from datetime import datetime
from parser import AdvancedParser

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode, Update
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, Updater

import config
from database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)


class JawaCzBot:
    def __init__(self):
        self.db = Database()
        self.parser = AdvancedParser()
        self.application = None

    def start(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üèçÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ Jawa –∏ CZ!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ Jawa –∏ CZ —Å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ /search - –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ /latest - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /sites - –û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å–∞–π—Ç–∞–º
‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞

        *–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã:*
        ‚Ä¢ –ö—É—Ñ–∞—Ä - Jawa (–ë–µ–ª–∞—Ä—É—Å—å)
        ‚Ä¢ –ö—É—Ñ–∞—Ä - Cezet (–ë–µ–ª–∞—Ä—É—Å—å)
        ‚Ä¢ AV.by - Jawa (–ë–µ–ª–∞—Ä—É—Å—å)
        ‚Ä¢ AV.by - Cezet (–ë–µ–ª–∞—Ä—É—Å—å)
        ‚Ä¢ abw.by (–ë–µ–ª–∞—Ä—É—Å—å)

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞!
        """

        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")],
            [InlineKeyboardButton("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data="latest")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üåê –ü–æ —Å–∞–π—Ç–∞–º", callback_data="sites")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            welcome_text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup
        )

    def help_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/search` - –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
‚Ä¢ `/latest` - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
‚Ä¢ `/sites` - –û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–∞–π—Ç–∞–º

*–ü–æ–∏—Å–∫:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/search` –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –º–æ—Ç–æ—Ü–∏–∫–ª—ã Jawa –∏ CZ
‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è (jawa, JAWA, Jawa, —è–≤–∞, –Ø–≤–∞)

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
‚Ä¢ –ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–º–µ—á–∞—é—Ç—Å—è –∫–∞–∫ "–Ω–æ–≤—ã–µ"

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã:*
‚Ä¢ –ö—É—Ñ–∞—Ä - Jawa (–ë–µ–ª–∞—Ä—É—Å—å) - auto.kufar.by
‚Ä¢ –ö—É—Ñ–∞—Ä - Cezet (–ë–µ–ª–∞—Ä—É—Å—å) - auto.kufar.by
‚Ä¢ AV.by - Jawa (–ë–µ–ª–∞—Ä—É—Å—å) - moto.av.by
‚Ä¢ AV.by - Cezet (–ë–µ–ª–∞—Ä—É—Å—å) - moto.av.by
‚Ä¢ abw.by (–ë–µ–ª–∞—Ä—É—Å—å) - abw.by

*–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:*
‚Ä¢ Jawa
‚Ä¢ CZ
‚Ä¢ –ß–µ—à—Å–∫–∏–π –º–æ—Ç–æ—Ü–∏–∫–ª
‚Ä¢ —è–≤–∞
        """

        update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

    def search_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search"""
        if not context.args:
            update.message.reply_text(
                "üîç *–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º:\n"
                "`/search Jawa`\n"
                "`/search CZ`\n"
                "`/search —á–µ—à—Å–∫–∏–π`",
                parse_mode=ParseMode.MARKDOWN,
            )
            return

        query = " ".join(context.args)
        update.message.reply_text(
            f"üîç –ò—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*", parse_mode=ParseMode.MARKDOWN
        )

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
            
            ads = self.parser.search_specific_model(query)
            
            logger.info(f"üìä –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            if ads:
                logger.info(f"üìù –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ads[0]}")
            
            if not ads:
                logger.warning(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                update.message.reply_text("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._send_ads_results(
                update, ads, f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}"
            )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            import traceback
            logger.error(f"üîç Traceback: {traceback.format_exc()}")
            update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    def latest_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /latest"""
        update.message.reply_text("üì∞ –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
            new_ads = self.db.get_new_advertisements(limit=20)

            if not new_ads:
                update.message.reply_text("üì≠ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
                return

            self._send_ads_results(update, new_ads, "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
            update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def stats_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            stats = self.db.get_statistics()

            stats_text = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π*

üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['total_ads']}
‚Ä¢ –ù–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['new_ads']}

üåê *–ü–æ —Å–∞–π—Ç–∞–º:*
"""

            for site, count in stats["site_stats"].items():
                stats_text += f"‚Ä¢ {site}: {count}\n"

            stats_text += (
                f"\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
            )

            update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

    def sites_command(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sites"""
        keyboard = []

        for site_key, site_config in config.PARSING_SITES.items():
            keyboard.append(
                [
                    InlineKeyboardButton(
                        f"üåê {site_config['name']}", callback_data=f"site_{site_key}"
                    )
                ]
            )

        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text(
            "üåê *–í—ã–±–µ—Ä–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup,
        )

    def button_callback(self, update: Update, context: CallbackContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        query.answer()

        if query.data == "search":
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π update –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞
            fake_update = type("Update", (), {"message": query.message})()
            self.search_command(fake_update, context)
        elif query.data == "latest":
            fake_update = type("Update", (), {"message": query.message})()
            self.latest_command(fake_update, context)
        elif query.data == "stats":
            fake_update = type("Update", (), {"message": query.message})()
            self.stats_command(fake_update, context)
        elif query.data == "sites":
            fake_update = type("Update", (), {"message": query.message})()
            self.sites_command(fake_update, context)
        elif query.data.startswith("site_"):
            site_key = query.data.replace("site_", "")
            self._show_site_ads(update, context, site_key)
        elif query.data.startswith("ad_"):
            ad_id = int(query.data.replace("ad_", ""))
            self._show_ad_details(update, context, ad_id)

    def _show_site_ads(self, update: Update, context: CallbackContext, site_key: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∞–π—Ç–∞"""
        try:
            site_ads = self.db.get_advertisements_by_site(
                config.PARSING_SITES[site_key]["name"], limit=15
            )

            if not site_ads:
                update.callback_query.edit_message_text(
                    f"üì≠ –ù–∞ —Å–∞–π—Ç–µ {config.PARSING_SITES[site_key]['name']} –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
                )
                return

            self._send_ads_results(
                update,
                site_ads,
                f"üåê –û–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Å–∞–π—Ç–∞ {config.PARSING_SITES[site_key]['name']}:",
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Å–∞–π—Ç–∞: {e}")
            update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
            )

    def _show_ad_details(self, update: Update, context: CallbackContext, ad_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            ads = self.db.get_new_advertisements(limit=100)
            ad = next((ad for ad in ads if ad["id"] == ad_id), None)

            if not ad:
                update.callback_query.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
            self.db.mark_as_viewed(ad_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            details_text = f"""
üèçÔ∏è *{ad['title']}*

üí∞ –¶–µ–Ω–∞: {ad.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üåê –°–∞–π—Ç: {ad['site_name']}
üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({ad['link']})
‚è∞ –î–æ–±–∞–≤–ª–µ–Ω–æ: {ad['created_at']}
            """

            if ad.get("description"):
                details_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{ad['description']}"

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="latest")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            update.callback_query.edit_message_text(
                details_text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup,
                disable_web_page_preview=True,
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π")

    def _send_ads_results(self, update: Update, ads: list, title: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        if not ads:
            update.message.reply_text("üì≠ –û–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {title}")
        logger.info(f"–ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {ads[0] if ads else '–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π'}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        update.message.reply_text(
            f"**{title}**\n–ù–∞–π–¥–µ–Ω–æ: {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            parse_mode=ParseMode.MARKDOWN,
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 5
        for i in range(0, len(ads), 5):
            batch = ads[i : i + 5]
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≥—Ä—É–ø–ø—É {i//5 + 1}: {len(batch)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            self._send_ads_batch(update, batch)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {title}")

    def _send_ads_batch(self, update: Update, ads: list):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≥—Ä—É–ø–ø—ã –∏–∑ {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

        for i, ad in enumerate(ads):
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {i+1}/{len(ads)}: {ad}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                title = ad.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                price = ad.get("price", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
                site_name = ad.get("site_name", "–ù–µ —É–∫–∞–∑–∞–Ω")
                link = ad.get("link", "#")

                logger.info(
                    f"–î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: title='{title}', price='{price}', site='{site_name}'"
                )

                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–µ–∑ Markdown
                ad_text = f"""üèçÔ∏è {title}
üí∞ –¶–µ–Ω–∞: {price}
üåê –°–∞–π—Ç: {site_name}
üîó –°—Å—ã–ª–∫–∞: {link}"""

                if ad.get("description"):
                    description = (
                        ad["description"][:100]
                        if len(ad["description"]) > 100
                        else ad["description"]
                    )
                    ad_text += f"\nüìù {description}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                update.message.reply_text(ad_text)

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                time.sleep(0.5)

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {i+1}: {title}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i+1} {ad}: {e}")
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –∑–∞–≥–æ–ª–æ–≤–æ–∫
                try:
                    simple_text = f"üèçÔ∏è {ad.get('title', '–û–±—ä—è–≤–ª–µ–Ω–∏–µ')} - {ad.get('price', '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
                    update.message.reply_text(simple_text)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {i+1}")
                except Exception as e2:
                    logger.error(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {i+1}: {e2}"
                    )
                continue

        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑ {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

    def run_parsing(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        while True:
            try:
                logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")

                # –ü–∞—Ä—Å–∏–º –≤—Å–µ —Å–∞–π—Ç—ã
                new_ads = self.parser.parse_all_sites()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                added_count = 0
                for ad in new_ads:
                    if self.db.add_advertisement(ad):
                        added_count += 1

                logger.info(
                    f"–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
                )

                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
                time.sleep(config.PARSING_INTERVAL * 60)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
                time.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º updater
        self.updater = Updater(token=config.TELEGRAM_TOKEN, use_context=True)

        # –ü–æ–ª—É—á–∞–µ–º dispatcher –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dp = self.updater.dispatcher

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dp.add_handler(CommandHandler("start", self.start))
        dp.add_handler(CommandHandler("help", self.help_command))
        dp.add_handler(CommandHandler("search", self.search_command))
        dp.add_handler(CommandHandler("latest", self.latest_command))
        dp.add_handler(CommandHandler("stats", self.stats_command))
        dp.add_handler(CommandHandler("sites", self.sites_command))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        dp.add_handler(CallbackQueryHandler(self.button_callback))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.updater.start_polling()


if __name__ == "__main__":
    bot = JawaCzBot()
    bot.run()
