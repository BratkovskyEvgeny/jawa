import logging
import threading
import time
from parser import AdvancedParser

import schedule

import config
from database import Database

logger = logging.getLogger(__name__)


class ParsingScheduler:
    def __init__(self):
        self.db = Database()
        self.parser = AdvancedParser()
        self.is_running = False
        self.thread = None

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.every(config.PARSING_INTERVAL).minutes.do(self.run_parsing)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.thread.start()

        logger.info(
            f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ {config.PARSING_INTERVAL} –º–∏–Ω—É—Ç"
        )

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
        if self.thread:
            self.thread.join(timeout=5)
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.is_running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def run_parsing(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö —Å–∞–π—Ç–æ–≤"""
        try:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")

            # –ü–∞—Ä—Å–∏–º –≤—Å–µ —Å–∞–π—Ç—ã
            new_ads = self.parser.parse_all_sites()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            added_count = 0
            for ad in new_ads:
                if self.db.add_advertisement(ad):
                    added_count += 1

            logger.info(
                f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
            )

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            self.db.cleanup_old_ads(days=30)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

    def run_parsing_now(self):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
        self.run_parsing()

    def get_next_run_time(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        jobs = schedule.get_jobs()
        if jobs:
            return jobs[0].next_run
        return None

    def get_schedule_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
        jobs = schedule.get_jobs()
        info = {
            "is_running": self.is_running,
            "next_run": self.get_next_run_time(),
            "interval_minutes": config.PARSING_INTERVAL,
            "total_jobs": len(jobs),
        }
        return info


def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    scheduler = ParsingScheduler()

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.start_scheduler()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        scheduler.run_parsing_now()

        # –î–µ—Ä–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–ø—É—â–µ–Ω–Ω–æ–π
        while True:
            time.sleep(60)

    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        scheduler.stop_scheduler()
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main()
